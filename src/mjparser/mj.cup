
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;

import ast.node.*;


parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IExp exp;
non terminal IStatement statement;
non terminal LinkedList<IStatement> statement_list;
non terminal MainClass main_class;
non terminal IStatement block_statement;
non terminal CallExp call_exp;
non terminal LinkedList<IExp> opt_exp;
non terminal IdLiteral id;
non terminal IType type;
non terminal MethodDecl method_decl;
non terminal List<MethodDecl> method_decls;
non terminal Formal formal;
non terminal LinkedList<Formal> formals;
non terminal IExp return_exp;
non terminal IClassDecl topclass_decl;
non terminal LinkedList<IClassDecl> class_decls;
non terminal CallStatement call_stmt;

/* Declare precedence and associativity  here */

precedence left AND;
precedence left LT;
precedence left EQUAL;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS, BYTE;
precedence left DOT;
precedence left ELSE;



/* Meggy Java Grammar */
start with program;

program ::= 
    IMPORT MEGGY SEMI main_class:mclass class_decls:c
    	{:
    		RESULT = new Program(mclass.getLine(), mclass.getPos(), mclass, c);
    	:}
    |	IMPORT MEGGY SEMI main_class:mclass
    	{:
    		RESULT = new Program(mclass.getLine(), mclass.getPos(), mclass, new LinkedList<IClassDecl>());
    	:}
    |
    ;
    
main_class ::=
        CLASS ID:name         
            {: java.io.PrintStream sout = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                
                // Check filename is class name, if not exit with error message
                System.out.println("Output filename: " + name.lexeme+".java.s");
                String expectedClassName = parser.programName;
                if(!expectedClassName.equals(name.lexeme +".java")){
                	System.out.println("Output file name: " + expectedClassName + " not equal main class name " + name.lexeme + ".java");
                	System.exit(1);
                }   
            :}
        LBRACE PUBLIC STATIC VOID MAIN 
        LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
       
        LBRACE block_statement:b RBRACE
          {:
          	RESULT = new MainClass(name.line, name.pos, name.lexeme, param.lexeme, b);
          :}

        RBRACE 
          {:
          	//parser.out.flush();
          :}
    ;
    
topclass_decl ::=
		CLASS id:i LBRACE method_decls:m RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new TopClassDecl(i.getLine(), i.getPos(), i.getLexeme(), new LinkedList<VarDecl>(), m);
		:}
	|	CLASS id:i LBRACE RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new TopClassDecl(i.getLine(), i.getPos(), i.getLexeme(), new LinkedList<VarDecl>(), new LinkedList<MethodDecl>());
		:}
	;
	
class_decls ::=
		topclass_decl:t
		{:
			LinkedList<IClassDecl> list = new LinkedList<IClassDecl>();
			list.add(t);
			RESULT = list;
		:}
	|	class_decls:list topclass_decl:t
		{:
			list.add(t);
			RESULT = list;
		:}
	;

method_decl	::=
		PUBLIC:op type:t id:i LPAREN formals:f RPAREN LBRACE statement_list:s return_exp:a RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new MethodDecl(op.pos, op.line, t, i.getLexeme(), f, new LinkedList<VarDecl>(), s, a); 
		:}
	| 	PUBLIC:op type:t id:i LPAREN formals:f RPAREN LBRACE return_exp:a RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new MethodDecl(op.pos, op.line, t, i.getLexeme(), f, new LinkedList<VarDecl>(), new LinkedList<IStatement>(), a); 
		:}
	| 	PUBLIC:op type:t id:i LPAREN formals:f RPAREN LBRACE statement_list:s RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new MethodDecl(op.pos, op.line, t, i.getLexeme(), f, new LinkedList<VarDecl>(), s, null); 
		:}
	| 	PUBLIC:op type:t id:i LPAREN RPAREN LBRACE statement_list:s RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new MethodDecl(op.pos, op.line, t, i.getLexeme(), new LinkedList<Formal>(), new LinkedList<VarDecl>(), s, null); 
		:}
	| 	PUBLIC:op type:t id:i LPAREN RPAREN LBRACE statement_list:s return_exp:a RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new MethodDecl(op.pos, op.line, t, i.getLexeme(), new LinkedList<Formal>(), new LinkedList<VarDecl>(), s, a); 
		:}
	| 	PUBLIC:op type:t id:i LPAREN RPAREN LBRACE return_exp:a RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new MethodDecl(op.pos, op.line, t, i.getLexeme(), new LinkedList<Formal>(), new LinkedList<VarDecl>(), new LinkedList<IStatement>(), a); 
		:}
	| 	PUBLIC:op type:t id:i LPAREN RPAREN LBRACE RBRACE
		{:
			// VarDecl is empty list since we are not dealing with them in pa4
			RESULT = new MethodDecl(op.pos, op.line, t, i.getLexeme(), new LinkedList<Formal>(), new LinkedList<VarDecl>(), new LinkedList<IStatement>(), null); 
		:}
	;
	
method_decls ::=
		method_decl:m
		{:
			LinkedList<MethodDecl> list = new LinkedList<MethodDecl>();
			list.add(m);
			RESULT = list;
		:}
	|	method_decls:list method_decl:m
		{:
			list.add(m);
			RESULT = list;
		:}
	;
	
return_exp	::=
		RETURN exp:a SEMI
		{:
			RESULT = a;
		:}
	;
    
formal ::=
		type:t id:i
		  {:
		    RESULT = new Formal(t.getLine(), t.getPos(), t, i.getLexeme());
		  :}
	;
	
formals	::=
		formal:f
		{:
		  LinkedList<Formal> list = new LinkedList<Formal>();
		  list.add(f);
		  RESULT = list;
		:}
	|   formals:list COMMA formal:a
		{:
		  list.add(a);
		  RESULT = list;
		:}
	;
	
type	::=
		BOOLEAN:t
		{:
			RESULT = new BoolType(t.line, t.pos);
		:}
	|	BYTE:t
		{:
			RESULT = new ByteType(t.line, t.pos);
		:}
	|	INT:t
		{:
			RESULT = new IntType(t.line, t.pos);
		:}
	|	VOID:t
		{:
			RESULT = new VoidType(t.line, t.pos);
		:}
	|	MEGGYCOLOR:t
		{:
			RESULT = new ColorType(t.line, t.pos);
		:}
	|	MEGGYBUTTON:t
		{:
			RESULT = new ButtonType(t.line, t.pos);
		:}
	|	MEGGYTONE:t
		{:
			RESULT = new ToneType(t.line, t.pos);
		:}
	;
    
statement ::= 
        LBRACE block_statement:b RBRACE
          {:
            RESULT = b;
          :}
	|	MEGGYSETPIXEL LPAREN:op exp:a COMMA	exp:b COMMA	exp:c RPAREN SEMI
		  {:
		  	RESULT = new MeggySetPixel(op.line, op.pos, a, b, c); 
		  :}
	|	MEGGYTONESTART LPAREN:op exp:a COMMA exp:b RPAREN SEMI
		  {:
		  	RESULT = new MeggyToneStart(op.line, op.pos, a, b); 
		  :}
	|	MEGGYDELAY LPAREN:op exp:a RPAREN SEMI
		  {:
		  	RESULT = new MeggyDelay(op.line, op.pos, a);
		  :}
	|	call_stmt:a SEMI
		  {:
		  	RESULT = a;
		  :}
	|	IF:op LPAREN exp:a RPAREN statement:s
		  {:
		  	//System.out.println("If Expression: " + a.getClass().getSimpleName());
            //ELSE statement is just a bogus empty block statement
		  	RESULT = new IfStatement(op.line, op.pos, a, s, null);
		  :}
	|	IF:op LPAREN exp:a RPAREN statement:s1 ELSE statement:s2
		  {:
		  	//System.out.println("If/Else Expression: " + a.getClass().getSimpleName());
		  	RESULT = new IfStatement(op.line, op.pos, a, s1, s2);
		  :}
	|	WHILE:op LPAREN exp:a RPAREN statement:s
		  {:
		  	RESULT = new WhileStatement(op.line, op.pos, a, s);
		  :}
	;
	
call_stmt ::=
		exp:a DOT:op id:i LPAREN RPAREN
		  {:
		    RESULT = new CallStatement(op.line, op.pos, a, i.getLexeme(), new LinkedList<IExp>());
		  :}
	|	exp:a DOT:op id:i LPAREN opt_exp:b RPAREN
		  {:
		    RESULT = new CallStatement(op.line, op.pos, a, i.getLexeme(), b);
		  :}
	;

block_statement ::=
          statement_list:s
	  	  {:
			if(s != null)
				RESULT = new BlockStatement(0, 0, s);
			else
				RESULT = new BlockStatement(0, 0, new LinkedList<IStatement>());
		  :}
    |     
    ;
	
statement_list ::=
		statement:s
		  {:
			LinkedList<IStatement> list = new LinkedList<IStatement>();
            if(s != null)
            	list.add(s);
            RESULT = list;
		  :}
	|	  statement_list:list statement:s
		  {:
			if(s != null) {
	          list.add(s);
	        } 
	        RESULT = list;
		  :}
	;
	
exp ::=
		exp:a AND:op exp:b
		  {:
		    RESULT = new AndExp(op.line, op.pos, a, b);
		  :}
	|	exp:a LT:op exp:b
		  {:
		    RESULT = new LtExp(op.line, op.pos, a, b);
		  :}
	|	exp:a EQUAL:op exp:b
		  {:
		    RESULT = new EqualExp(op.line, op.pos, a, b);
		  :}
	|	exp:a PLUS:op exp:b
		  {:
		    RESULT = new PlusExp(op.line, op.pos, a, b);
		  :}
	|	exp:a MINUS:op exp:b
		  {:
		    RESULT = new MinusExp(op.line, op.pos, a, b);
		  :}
	|	exp:a TIMES:op exp:b
		  {:
		    RESULT = new MulExp(op.line, op.pos, a, b);
		  :}
	|	MINUS:op exp:a
		  {:
		  	RESULT = new NegExp(op.line, op.pos, a);
		  :}
          %prec UMINUS
	|	call_exp:a
		  {:
		    RESULT = a;
		  :}
	|	MEGGYGETPIXEL:op LPAREN exp:a COMMA exp:b RPAREN	
		  {:
		    RESULT = new MeggyGetPixel(op.line, op.pos, a, b);
		  :}
	|	MEGGYCHECKBUTTON:op LPAREN exp:a RPAREN
		  {:
		    RESULT = new MeggyCheckButton(op.line, op.pos, a);
		  :}	
	|	LPAREN BYTE:op RPAREN exp:a
		  {: 
		  	//System.out.println("ByteCast: " + a.getClass().getSimpleName());
			RESULT = new ByteCast(op.line, op.pos, a);
		  :}
          %prec BYTE
	|	INT_LITERAL:i
		  {:
			RESULT = new IntLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	COLOR_LITERAL:i
		  {: 
			RESULT = new ColorLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	| 	BUTTON_LITERAL:i
		  {: 
			RESULT = new ButtonLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	TONE_LITERAL:i
		  {: 
			RESULT = new ToneLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	TRUE:i
		  {: 
			RESULT = new TrueLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	FALSE:i
		  {: 
			RESULT = new FalseLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	id:i
		  {: 
			RESULT = i;
		  :}
	|	THIS:i
		  {: 
		  	// HOW DO WE HANDLE VALUE FOR THIS CONSTRUCTOR?
		  	// value an offset or something?
			RESULT = new ThisLiteral(i.line, i.pos, i.lexeme, 0);
		  :}
	|	NEW:op id:i LPAREN RPAREN
	 	  {: 
			RESULT = new NewExp(op.line, op.pos, i.getLexeme());
		  :}
	|	NOT:i exp:a
	 	  {: 
			RESULT = new NotExp(i.line, i.pos, a);
		  :}
	|	LPAREN exp:a RPAREN
	 	  {: 
	 	  	//System.out.println("Expression: " + a.getClass().getSimpleName());
			RESULT = a;
		  :}
	;
	
call_exp ::=
		exp:a DOT:op id:i LPAREN RPAREN
		  {:
		    RESULT = new CallExp(op.line, op.pos, a, i.getLexeme(), new LinkedList<IExp>());
		  :}
	|	exp:a DOT:op id:i LPAREN opt_exp:b RPAREN
		  {:
		    RESULT = new CallExp(op.line, op.pos, a, i.getLexeme(), b);
		  :}
	;
	
opt_exp	::=
		exp:a
		{:
		  LinkedList<IExp> list = new LinkedList<IExp>();
		  list.add(a);
		  RESULT = list;
		:}
	|   opt_exp:list COMMA exp:a
		{:
		  list.add(a);
		  RESULT = list;
		:}
	;
	
id	::=
		ID:i
		{: 
			RESULT = new IdLiteral(i.line, i.pos, i.lexeme);
		:}
	;
