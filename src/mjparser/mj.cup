
package mjparser;
import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;

import ast.node.*;


parser code {:

    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol SymbolValue = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)SymbolValue.value;
        System.err.println("[" + tok.line + "," + tok.pos + "] " 
                               + message + " at " + tok.toString() );
    }
            
:}

/* Notice: all terminals declared here */
terminal SymbolValue PLUS, MINUS, TIMES, LPAREN, RPAREN;
terminal SymbolValue LBRACE, RBRACE;
terminal SymbolValue BOOLEAN, INT;
terminal SymbolValue BYTE;
terminal SymbolValue MAIN, IMPORT;
terminal SymbolValue IF, ELSE;
terminal SymbolValue LT;
terminal SymbolValue EQUAL;
terminal SymbolValue AND, NOT;
terminal SymbolValue WHILE;
terminal SymbolValue COMMA, DOT;
terminal SymbolValue NEW, PUBLIC, RETURN, STATIC;
terminal SymbolValue STRING, VOID;
terminal SymbolValue CLASS, EXTENDS;
terminal SymbolValue LBRACKET, RBRACKET;
terminal SymbolValue LENGTH;
terminal SymbolValue SEMI;
terminal SymbolValue ASSIGN;

terminal SymbolValue MEGGY;
terminal SymbolValue MEGGYCOLOR;
terminal SymbolValue MEGGYBUTTON;
terminal SymbolValue MEGGYTONE;
terminal SymbolValue MEGGYSETPIXEL;
terminal SymbolValue MEGGYSETAUXLEDS;
terminal SymbolValue MEGGYTONESTART;
terminal SymbolValue MEGGYDELAY;
terminal SymbolValue MEGGYGETPIXEL;
terminal SymbolValue MEGGYCHECKBUTTON;

terminal SymbolValue INT_LITERAL, ID;
terminal SymbolValue TRUE, FALSE;
terminal SymbolValue COLOR_LITERAL, BUTTON_LITERAL, TONE_LITERAL;
terminal SymbolValue THIS;

/* bogus terminal for unary precedence declaration */
terminal UMINUS;

non terminal Program program;
non terminal IExp exp;
non terminal IStatement statement;
non terminal LinkedList<IStatement> statement_list;
non terminal MainClass main_class;

/* Declare precedence and associativity  here */

precedence left PLUS, MINUS;
precedence left TIMES;
precedence left EQUAL;
precedence left AND;
precedence left ELSE;


/* Meggy Java Grammar */
start with program;

program ::= 
    IMPORT MEGGY SEMI main_class:mclass
    	{:
    		// The last field is empty list since we are not dealing with
    		// LinkedList<IClassDecl> yet.
    		RESULT = new Program(mclass.getLine(), mclass.getPos(), mclass, new LinkedList<IClassDecl>());
    	:}
    |
    	{:
    	
    	:}
    ;
    
main_class ::=
        CLASS ID:name         
            {: java.io.PrintStream sout = new java.io.PrintStream(
                        new java.io.FileOutputStream(name.lexeme+".java.s"));
                parser.out = new PrintWriter(sout);
                
                // Check filename is class name, if not exit with error message
                String expectedClassName = parser.programName.substring(0, parser.programName.lastIndexOf("."));
                if(!expectedClassName.equals(name.lexeme)){
                	System.out.println("Error: Could not find or load main class " + expectedClassName);
                	System.exit(1);
                }   
            :}
        LBRACE PUBLIC STATIC VOID MAIN 
        LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
        LBRACE
        {: 
            // This adds the prolog
            //System.out.println("Generate prolog using avrH.rtl.s");
            InputStream mainPrologue=null;
            BufferedReader reader=null;
            try {
                // The syntax for loading a text resource file 
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainPrologue = this.getClass().getClassLoader().getResourceAsStream("avrH.rtl.s");
                reader = new BufferedReader(new InputStreamReader(mainPrologue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  //System.out.println(line);
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null)
                    	mainPrologue.close();
                    if(reader!=null)
                    	reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }
          :}
        statement_list:list 
          {:
          	RESULT = new MainClass(name.line, name.pos, name.lexeme, param.lexeme, new BlockStatement(name.line, name.pos, list));
          :}
        RBRACE
          {:
          
          
          	// This adds the epilog after the last brace of main
            //System.out.println("Generate epilog using avrF.rtl.s");
            InputStream mainEpilogue=null;
            BufferedReader reader=null;
            try {
                mainEpilogue = this.getClass().getClassLoader().getResourceAsStream("avrF.rtl.s");
                reader = new BufferedReader(new InputStreamReader(mainEpilogue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainEpilogue!=null) mainEpilogue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }
          :}
        RBRACE 
          {:
          	parser.out.flush();
          :}
    |	PUBLIC STATIC VOID MAIN 
        LPAREN STRING LBRACKET RBRACKET ID:param RPAREN
        LBRACE 
          {: 
            // This adds the prolog
            //System.out.println("Generate prolog using avrH.rtl.s");
            InputStream mainPrologue=null;
            BufferedReader reader=null;
            try {
                // The syntax for loading a text resource file 
                // from a jar file here:
                // http://www.rgagnon.com/javadetails/java-0077.html
                mainPrologue = this.getClass().getClassLoader().getResourceAsStream("avrH.rtl.s");
                reader = new BufferedReader(new InputStreamReader(mainPrologue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  //System.out.println(line);
                  parser.out.println(line);
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainPrologue!=null)
                    	mainPrologue.close();
                    if(reader!=null)
                    	reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }
          :}
       RBRACE
          {:
          	// This adds the epilog after the last brace of main
            //System.out.println("Generate epilog using avrF.rtl.s");
            InputStream mainEpilogue=null;
            BufferedReader reader=null;
            try {
                mainEpilogue = this.getClass().getClassLoader().getResourceAsStream("avrF.rtl.s");
                reader = new BufferedReader(new InputStreamReader(mainEpilogue));

                String line = null;
                while ((line = reader.readLine()) != null) {
                  parser.out.println(line);
                }
            } catch ( Exception e2) {
                e2.printStackTrace();
            }
            finally{
                try{
                    if(mainEpilogue!=null) mainEpilogue.close();
                    if(reader!=null) reader.close();
                }
                catch (IOException e) {
                   e.printStackTrace();
                }
            }
          :}
    ;
    
statement ::= 
		MEGGYSETPIXEL:op LPAREN exp:a COMMA	exp:b COMMA	exp:c RPAREN SEMI
		  {:
		  	RESULT = new MeggySetPixel(op.line, op.pos, a, b, c); 
		  :}
	|	MEGGYDELAY:op LPAREN exp:a RPAREN SEMI
		  {:
		  	RESULT = new MeggyDelay(op.line, op.pos, a);
		  :}
	|	IF:op LPAREN exp:a RPAREN statement:s
		  {:
		  	System.out.println("If Expression: " + a.getClass().getSimpleName());
		  	
		  	RESULT = new IfStatement(op.line, op.pos, a, s, s);
		  :}
	|	IF:op LPAREN exp:a RPAREN statement:s1 ELSE statement:s2
		  {:
		  	System.out.println("If/Else Expression: " + a.getClass().getSimpleName());
		  	RESULT = new IfStatement(op.line, op.pos, a, s1, s2);
		  :}
	|	WHILE:op LPAREN exp:a RPAREN statement:s
		  {:
		  	RESULT = new WhileStatement(op.line, op.pos, a, s);
		  :}
	;
	
statement_list ::=
		statement_list:list statement:s
		  {:
			  if(s != null) {
	            list.add(s);
	          } 
	          RESULT = list;
		  :}
	|	statement:s
		  {:
			LinkedList<IStatement> list = new LinkedList<IStatement>();
            list.add(s);
            RESULT = list;
		  :}
	;
	
exp ::=
		exp:a AND:op exp:b
		  {:
		    RESULT = new AndExp(op.line, op.pos, a, b);
		  :}
	|	exp:a EQUAL:op exp:b
		  {:
		  	System.out.println("EqualExp a: " + a.getClass().getSimpleName() + " EqualExp b: " + b.getClass().getSimpleName());
		    RESULT = new EqualExp(op.line, op.pos, a, b);
		  :}
	|	exp:a PLUS:op exp:b
		  {:
		    RESULT = new PlusExp(op.line, op.pos, a, b);
		  :}
	|	exp:a MINUS:op exp:b
		  {:
		    RESULT = new MinusExp(op.line, op.pos, a, b);
		  :}
	|	exp:a TIMES:op exp:b
		  {:
		    RESULT = new MulExp(op.line, op.pos, a, b);
		  :}
	|	MINUS:op exp:a
		  {:
		  	RESULT = new NegExp(op.line, op.pos, a);
		  :}
	|	MEGGYGETPIXEL:op LPAREN exp:a COMMA exp:b RPAREN	
		  {:
		    RESULT = new MeggyGetPixel(op.line, op.pos, a, b);
		  :}
	|	MEGGYCHECKBUTTON:op LPAREN exp:a RPAREN
		  {:
		    RESULT = new MeggyCheckButton(op.line, op.pos, a);
		  :}	
	|	LPAREN BYTE:op RPAREN exp:a
		  {: 
		  	System.out.println("ByteCast: " + a.getClass().getSimpleName());
			RESULT = new ByteCast(op.line, op.pos, a);;
		  :}
	|	INT_LITERAL:i
		  {:
			RESULT = new IntLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	COLOR_LITERAL:i
		  {: 
			RESULT = new ColorLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	| 	BUTTON_LITERAL:i
		  {: 
			RESULT = new ButtonLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	TRUE:i
		  {: 
			RESULT = new TrueLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	FALSE:i
		  {: 
			RESULT = new FalseLiteral(i.line, i.pos, i.lexeme, i.value);
		  :}
	|	NOT:i exp:a
	 	  {: 
			RESULT = new NotExp(i.line, i.pos, a);
		  :}
	|	LPAREN exp:a RPAREN
	 	  {: 
	 	  	System.out.println("Expression: " + a.getClass().getSimpleName());
			if(a instanceof ByteCast){
				ByteCast b = (ByteCast) a;
				if(b.getExp() instanceof MulExp){
					System.out.println("\tFound MulExp");
					MulExp e = (MulExp) b.getExp();
					b.setExp(e.getLExp());
					e.setLExp(b);
					RESULT = e;
				}else if(b.getExp() instanceof PlusExp){
					System.out.println("\tFound PlusExp");
					PlusExp e = (PlusExp) b.getExp();
					b.setExp(e.getLExp());
					e.setLExp(b);
					RESULT = e;
				}else if(b.getExp() instanceof MinusExp){
					System.out.println("\tFound MinusExp");
					MinusExp e = (MinusExp) b.getExp();
					b.setExp(e.getLExp());
					e.setLExp(b);
					RESULT = e;
				}else if(b.getExp() instanceof EqualExp){
					System.out.println("\tFound EqualExp");
					EqualExp e = (EqualExp) b.getExp();
					b.setExp(e.getLExp());
					e.setLExp(b);
					RESULT = e;
				}else{
					RESULT =  a;
				}
			}else if(a instanceof NegExp){
				NegExp n = (NegExp) a;
				if(n.getExp() instanceof MulExp){
					System.out.println("\tFound MulExp");
					MulExp e = (MulExp) n.getExp();
					n.setExp(e.getLExp());
					e.setLExp(n);
					RESULT = e;
				}else if(n.getExp() instanceof PlusExp){
					System.out.println("\tFound PlusExp");
					PlusExp e = (PlusExp) n.getExp();
					n.setExp(e.getLExp());
					e.setLExp(n);
					RESULT = e;
				}else if(n.getExp() instanceof MinusExp){
					System.out.println("\tFound MinusExp");
					MinusExp e = (MinusExp) n.getExp();
					n.setExp(e.getLExp());
					e.setLExp(n);
					RESULT = e;
				}else if(n.getExp() instanceof EqualExp){
					System.out.println("\tFound EqualExp");
					EqualExp e = (EqualExp) n.getExp();
					n.setExp(e.getLExp());
					e.setLExp(n);
					RESULT = e;
				}else{
					RESULT =  a;
				}
			}else
				RESULT = a;
		  :}
	;
	
